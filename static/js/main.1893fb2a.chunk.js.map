{"version":3,"sources":["HomePage.js","AddPage.js","PageNotFound.js","serviceWorker.js","index.js","App.js"],"names":["HomePage","className","AddPage","handleSearch","event","preventDefault","console","log","target","searchTerm","value","onSubmit","this","type","placeholder","name","React","Component","PageNotFound","Boolean","window","location","hostname","match","ReactDOM","render","to","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAEe,SAASA,IACtB,OACE,yBAAKC,UAAU,YACb,iDACA,uFACA,kF,4CCJeC,G,iNACnBC,aAAe,SAAAC,GACbA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,OAAOC,WAAWC,Q,wEAIpC,OACE,yBAAKT,UAAU,WACb,4CACA,wFACA,0BAAMA,UAAU,aAAaU,SAAUC,KAAKT,cAC1C,2BACEU,KAAK,SACLZ,UAAU,YACVa,YAAY,+CACZC,KAAK,eAEP,2BAAOF,KAAK,SAASZ,UAAU,eAAeS,MAAM,iB,GAlBzBM,IAAMC,YCA5B,SAASC,IACtB,OACE,yBAAKjB,UAAU,gBACb,mFACA,0DCKckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCMD,WACb,OACE,kBAAC,IAAD,KACE,wBAAIxB,UAAU,UACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAASyB,GAAG,QAAZ,eAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,SAAZ,gBAEF,wBAAIzB,UAAU,aACZ,kBAAC,IAAD,CAASyB,GAAG,SAAZ,iBAGJ,6BAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW7B,IACxC,kBAAC,IAAD,CAAO2B,KAAK,OAAOE,UAAW3B,IAC9B,kBAAC,IAAD,CAAOyB,KAAK,UACZ,kBAAC,IAAD,CAAOA,KAAK,UACZ,kBAAC,IAAD,CAAOE,UAAWX,QD3BV,MAASY,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1893fb2a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./HomeAndNotFound.css\";\nexport default function HomePage() {\n  return (\n    <div className=\"homePage\">\n      <h1>Cooking Companion</h1>\n      <h2>Your one-stop-shop for deciding whatâ€™s for dinner.</h2>\n      <h3>Select an option from the nav bar to get started.</h3>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./AddPage.css\";\n\nexport default class AddPage extends React.Component {\n  handleSearch = event => {\n    event.preventDefault();\n    console.log(event.target.searchTerm.value);\n  };\n\n  render() {\n    return (\n      <div className=\"addPage\">\n        <h1>Add a Recipe</h1>\n        <h2>Type a food name in the box below to search for a recipe</h2>\n        <form className=\"searchForm\" onSubmit={this.handleSearch}>\n          <input\n            type=\"search\"\n            className=\"searchBar\"\n            placeholder=\"Search for pizza, pasta, or other recipes...\"\n            name=\"searchTerm\"\n          ></input>\n          <input type=\"submit\" className=\"searchButton\" value=\"Search\"></input>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./HomeAndNotFound.css\";\n\nexport default function PageNotFound() {\n  return (\n    <div className=\"pageNotFound\">\n      <h1>Oops! The page you were looking for does not exist.</h1>\n      <h2>404 Error: Page Not Found</h2>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  NavLink\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport HomePage from \"./HomePage\";\nimport AddPage from \"./AddPage\";\nimport PageNotFound from \"./PageNotFound\";\n\nexport default function App() {\n  return (\n    <Router>\n      <ul className=\"navbar\">\n        <li className=\"left-nav\">\n          <NavLink to=\"/add\">Add Recipe</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/pick\">Pick For Me</NavLink>\n        </li>\n        <li className=\"right-nav\">\n          <NavLink to=\"/book\">Recipe Book</NavLink>\n        </li>\n      </ul>\n      <hr></hr>\n\n      <Switch>\n        <Route path=\"/\" exact={true} component={HomePage}></Route>\n        <Route path=\"/add\" component={AddPage}></Route>\n        <Route path=\"/pick\"></Route>\n        <Route path=\"/book\"></Route>\n        <Route component={PageNotFound}></Route>\n      </Switch>\n    </Router>\n  );\n}\n"],"sourceRoot":""}